---
alwaysApply: true
description: Dialogue about tool/service/framework choices using scope criteria
---

# Tool Selection Rules

## Core Principle

Before suggesting any **tool, service, or framework**, evaluate it against scope criteria and present alternatives when appropriate.

## Step 1: Check Scope

Is the tool in `escopo.md` **"Ferramentas Pr√©-Aprovadas"** list?

**YES** ‚Üí Use it directly, mention why:
```
"Usando Prisma (pr√©-aprovado: 100% automa√ß√£o, alto dom√≠nio IA)"
```

**NO** ‚Üí Continue to Step 2

## Step 2: Evaluate Using Scope Criteria

Evaluate against `escopo.md` Section 2 criteria:

### üìä Automa√ß√£o (Automation)
- **100%** ‚Üí Everything via code/CLI, zero manual steps ‚úÖ
- **80-99%** ‚Üí 1-2 simple manual steps acceptable ‚ö†Ô∏è  
- **60-79%** ‚Üí Some GUI required for configs ‚ö†Ô∏è
- **< 60%** ‚Üí Multiple manual steps required ‚ùå

### ü§ñ Dom√≠nio IA (AI Knowledge)
- **Alto** ‚Üí Deep knowledge, can generate complete code ‚úÖ
- **M√©dio** ‚Üí Basic knowledge, may need docs ‚ö†Ô∏è
- **Baixo** ‚Üí Limited knowledge, risky implementation ‚ùå

### ‚öôÔ∏è Setup (Complexity)
- **Simples** ‚Üí 1-3 commands to get running ‚úÖ
- **Moderado** ‚Üí 4-8 commands or external account ‚ö†Ô∏è
- **Complexo** ‚Üí >10 steps or multiple external services ‚ùå

## Step 3: Decision Tree

### Score: All ‚úÖ (Green)
‚Üí Use directly, mention scores briefly

### Score: Mix of ‚úÖ and ‚ö†Ô∏è (Yellow)  
‚Üí Present 2-3 alternatives with comparison
‚Üí Ask user to choose

### Score: Any ‚ùå (Red)
‚Üí DO NOT suggest this tool
‚Üí Present 2-3 better alternatives
‚Üí Explain why original doesn't meet criteria

## Step 4: Presentation Format

When presenting alternatives:

```
üîç An√°lise de [Categoria - ex: Database]

Preciso escolher [tipo de ferramenta] para [prop√≥sito do projeto].

Op√ß√£o A: [Nome - ex: SQLite + Prisma]
üìä Scores:
  - Automa√ß√£o: 100% ‚úÖ (schema via Prisma, migrations autom√°ticas)
  - Dom√≠nio IA: Alto ‚úÖ (conhe√ßo profundamente)
  - Setup: 2 comandos ‚úÖ (prisma init + generate)
  
‚úÖ Pr√≥s:
  - Local-first, funciona offline
  - Zero configura√ß√£o manual
  - File-based, f√°cil backup
  
‚ö†Ô∏è Contras:
  - N√£o ideal para >100GB dados
  - Sem recursos avan√ßados (replica√ß√£o)

üì¶ Melhor para: Projetos pequenos/m√©dios, desenvolvimento local

---

Op√ß√£o B: [Nome - ex: PostgreSQL + Prisma]
üìä Scores:
  - Automa√ß√£o: 100% ‚úÖ (schema via Prisma)
  - Dom√≠nio IA: Alto ‚úÖ
  - Setup: 4 comandos ‚ö†Ô∏è (Docker + Prisma)
  
‚úÖ Pr√≥s:
  - Escal√°vel, produ√ß√£o-ready
  - Recursos avan√ßados completos
  
‚ö†Ô∏è Contras:
  - Requer Docker rodando
  - Setup mais complexo

üì¶ Melhor para: Projetos m√©dios/grandes, produ√ß√£o

---

Op√ß√£o C: [Nome - ex: Supabase]
üìä Scores:
  - Automa√ß√£o: 60% ‚ö†Ô∏è (schema via SQL mas UI para configs)
  - Dom√≠nio IA: M√©dio ‚ö†Ô∏è (menos documenta√ß√£o clara)
  - Setup: Vari√°vel ‚ö†Ô∏è (requer conta, configs online)
  
‚úÖ Pr√≥s:
  - Auth/Storage prontos
  - Interface visual para debug
  
‚ö†Ô∏è Contras:
  - Requer GUI para algumas configs (baixa automa√ß√£o)
  - Rate limits no free tier
  - Depend√™ncia de servi√ßo externo

üì¶ Melhor para: MVPs r√°pidos com auth pronta

---

‚ùì Qual op√ß√£o prefere? (A / B / C / outra)
```

## Step 5: After User Decides

Proceed with chosen tool without further questions about it.

## What NEVER to Do

‚ùå Suggest tools requiring manual GUI setup (without warning)
‚ùå Use tools with "Baixo" (Low) AI Domain score
‚ùå Decide unilaterally when multiple good options exist
‚ùå Hide trade-offs or present biased comparison
‚ùå Suggest tools just because "popular" without evaluating criteria
‚ùå Ignore escopo.md pre-approved list

## What ALWAYS to Do

‚úÖ Check pre-approved list first
‚úÖ Evaluate using scope criteria (Automa√ß√£o, Dom√≠nio IA, Setup)
‚úÖ Be transparent about limitations
‚úÖ Present objective pros/cons
‚úÖ Let user make final decision when options exist
‚úÖ Explain scores briefly (why 100% automation, etc)
‚úÖ Provide "Melhor para" guidance for each option

## Common Scenarios

### Scenario 1: Pre-Approved Tool ‚úÖ

```
User needs ORM for SQLite database

AI: "Usando Prisma com SQLite (pr√©-aprovado).
üìä Scores: 100% automa√ß√£o, Alto dom√≠nio IA, 2 comandos setup"

[No need to present alternatives]
```

### Scenario 2: Multiple Good Options ‚úÖ

```
User needs state management, not specified in scope

AI: [Presents Zustand vs Context API vs Jotai analysis]
AI: "‚ùì Qual op√ß√£o prefere?"

[Wait for user choice]
```

### Scenario 3: Tool Doesn't Meet Criteria ‚ùå

```
User asks about PocketBase

AI: "Detectei problema com PocketBase:
üìä Scores:
  - Automa√ß√£o: 40% ‚ùå (collections/campos manuais via GUI)
  - Dom√≠nio IA: M√©dio ‚ö†Ô∏è
  - Setup: Simples ‚úÖ

N√£o recomendo: baixa automa√ß√£o (requer cria√ß√£o manual).

Alternativas que atendem crit√©rios:
[Present SQLite+Prisma vs PostgreSQL+Prisma]"
```

### Scenario 4: User Specifies Unknown Tool ‚ö†Ô∏è

```
Escopo mentions [tech X] that AI doesn't know well

AI: "Detectei [tech X] no escopo.
üìä Meu conhecimento: Baixo ‚ùå

‚ö†Ô∏è Aviso: Posso ter dificuldades implementando [tech X].

Alternativas que domino:
[Present 2-3 alternatives AI knows well]

Prefere:
A) Continuar com [tech X] (riscos: implementa√ß√£o incompleta)
B) Usar alternativa que conhe√ßo melhor
C) Voc√™ fornece mais detalhes sobre [tech X]

Escolha A/B/C"
```

## Integration with Other Rules

- **00-universal-dependencies.mdc**: This = tools/services, That = libraries
- **00-universal-ask-first.mdc**: This = WHICH tool, That = HOW to use
- **00-universal-workflow.mdc**: Present analysis ‚Üí Get approval ‚Üí Execute

## Examples by Category

### Database/ORM ‚úÖ
Pre-approved: SQLite+Prisma, PostgreSQL+Prisma
Present alternatives: If user asks for MySQL, MongoDB, Supabase

### Backend Framework ‚úÖ
Pre-approved: Next.js API Routes, Express, Fastify
Present alternatives: If user asks for NestJS, Koa

### Frontend Framework ‚úÖ
Pre-approved: Next.js, React+Vite
Present alternatives: If user asks for Vue, Angular, Svelte

### Styling ‚úÖ
Pre-approved: Tailwind CSS, CSS Modules
Present alternatives: If user asks for styled-components, emotion

### UI Components ‚úÖ
Pre-approved: shadcn/ui, Radix UI
Present alternatives: If user asks for Material-UI, Ant Design

## Remember

**Before suggesting ANY tool:**
1. Check pre-approved list
2. Evaluate criteria scores
3. Present alternatives if needed
4. Let user decide

**Transparency > Convenience**

Better to discuss options upfront than implement wrong tool and rewrite.
